"use strict";
(self["webpackChunkeditor"] = self["webpackChunkeditor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_bicep_bicep_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conf": () => (/* binding */ conf),
/* harmony export */   "language": () => (/* binding */ language)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var bounded = function (text) { return "\\b" + text + "\\b"; };
var identifierStart = '[_a-zA-Z]';
var identifierContinue = '[_a-zA-Z0-9]';
var identifier = bounded("" + identifierStart + identifierContinue + "*");
var keywords = [
    'targetScope',
    'resource',
    'module',
    'param',
    'var',
    'output',
    'for',
    'in',
    'if',
    'existing'
];
var namedLiterals = ['true', 'false', 'null'];
var nonCommentWs = "[ \\t\\r\\n]";
var numericLiteral = "[0-9]+";
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'" },
        { open: "'''", close: "'''" }
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] },
        { open: "'''", close: "'''", notIn: ['string', 'comment'] }
    ],
    autoCloseBefore: ":.,=}])' \n\t",
    indentationRules: {
        increaseIndentPattern: new RegExp('^((?!\\/\\/).)*(\\{[^}"\'`]*|\\([^)"\'`]*|\\[[^\\]"\'`]*)$'),
        decreaseIndentPattern: new RegExp('^((?!.*?\\/\\*).*\\*/)?\\s*[\\}\\]].*$')
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.bicep',
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.square' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    symbols: /[=><!~?:&|+\-*/^%]+/,
    keywords: keywords,
    namedLiterals: namedLiterals,
    escapes: "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|'|\\${)",
    tokenizer: {
        root: [{ include: '@expression' }, { include: '@whitespace' }],
        stringVerbatim: [
            { regex: "(|'|'')[^']", action: { token: 'string' } },
            { regex: "'''", action: { token: 'string.quote', next: '@pop' } }
        ],
        stringLiteral: [
            { regex: "\\${", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "[^\\\\'$]+", action: { token: 'string' } },
            { regex: '@escapes', action: { token: 'string.escape' } },
            { regex: "\\\\.", action: { token: 'string.escape.invalid' } },
            { regex: "'", action: { token: 'string', next: '@pop' } }
        ],
        bracketCounting: [
            { regex: "{", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "}", action: { token: 'delimiter.bracket', next: '@pop' } },
            { include: 'expression' }
        ],
        comment: [
            { regex: "[^\\*]+", action: { token: 'comment' } },
            { regex: "\\*\\/", action: { token: 'comment', next: '@pop' } },
            { regex: "[\\/*]", action: { token: 'comment' } }
        ],
        whitespace: [
            { regex: nonCommentWs },
            { regex: "\\/\\*", action: { token: 'comment', next: '@comment' } },
            { regex: "\\/\\/.*$", action: { token: 'comment' } }
        ],
        expression: [
            { regex: "'''", action: { token: 'string.quote', next: '@stringVerbatim' } },
            { regex: "'", action: { token: 'string.quote', next: '@stringLiteral' } },
            { regex: numericLiteral, action: { token: 'number' } },
            {
                regex: identifier,
                action: {
                    cases: {
                        '@keywords': { token: 'keyword' },
                        '@namedLiterals': { token: 'keyword' },
                        '@default': { token: 'identifier' }
                    }
                }
            }
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19iaWNlcF9iaWNlcF9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRLFlBQVksR0FBRztBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLEdBQUc7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSxxREFBcUQ7QUFDL0QsVUFBVTtBQUNWO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsOERBQThELEdBQUc7QUFDakUsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLDZCQUE2QjtBQUMzRCxVQUFVLGtEQUFrRDtBQUM1RCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsYUFBYSxrQkFBa0I7QUFDcEQ7QUFDQSxpQkFBaUIsd0JBQXdCLElBQUksd0JBQXdCO0FBQ3JFO0FBQ0EsY0FBYyxnQ0FBZ0MsbUJBQW1CO0FBQ2pFLGNBQWMsd0JBQXdCO0FBQ3RDO0FBQ0E7QUFDQSxjQUFjLFlBQVksYUFBYSx3REFBd0Q7QUFDL0YsY0FBYywrQkFBK0IsbUJBQW1CO0FBQ2hFLGNBQWMsNkJBQTZCLDBCQUEwQjtBQUNyRSxjQUFjLDBCQUEwQixrQ0FBa0M7QUFDMUUsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBLGNBQWMsU0FBUyxhQUFhLHdEQUF3RDtBQUM1RixjQUFjLFNBQVMsYUFBYSw0Q0FBNEM7QUFDaEYsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjLDRCQUE0QixvQkFBb0I7QUFDOUQsY0FBYywyQkFBMkIsa0NBQWtDO0FBQzNFLGNBQWMsMkJBQTJCO0FBQ3pDO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQyxjQUFjLDJCQUEyQixzQ0FBc0M7QUFDL0UsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBLGNBQWMsd0JBQXdCLGtEQUFrRDtBQUN4RixjQUFjLHNCQUFzQixpREFBaUQ7QUFDckYsY0FBYyxpQ0FBaUMsbUJBQW1CO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCw0Q0FBNEMsa0JBQWtCO0FBQzlELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL2JpY2VwL2JpY2VwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbnZhciBib3VuZGVkID0gZnVuY3Rpb24gKHRleHQpIHsgcmV0dXJuIFwiXFxcXGJcIiArIHRleHQgKyBcIlxcXFxiXCI7IH07XHJcbnZhciBpZGVudGlmaWVyU3RhcnQgPSAnW19hLXpBLVpdJztcclxudmFyIGlkZW50aWZpZXJDb250aW51ZSA9ICdbX2EtekEtWjAtOV0nO1xyXG52YXIgaWRlbnRpZmllciA9IGJvdW5kZWQoXCJcIiArIGlkZW50aWZpZXJTdGFydCArIGlkZW50aWZpZXJDb250aW51ZSArIFwiKlwiKTtcclxudmFyIGtleXdvcmRzID0gW1xyXG4gICAgJ3RhcmdldFNjb3BlJyxcclxuICAgICdyZXNvdXJjZScsXHJcbiAgICAnbW9kdWxlJyxcclxuICAgICdwYXJhbScsXHJcbiAgICAndmFyJyxcclxuICAgICdvdXRwdXQnLFxyXG4gICAgJ2ZvcicsXHJcbiAgICAnaW4nLFxyXG4gICAgJ2lmJyxcclxuICAgICdleGlzdGluZydcclxuXTtcclxudmFyIG5hbWVkTGl0ZXJhbHMgPSBbJ3RydWUnLCAnZmFsc2UnLCAnbnVsbCddO1xyXG52YXIgbm9uQ29tbWVudFdzID0gXCJbIFxcXFx0XFxcXHJcXFxcbl1cIjtcclxudmFyIG51bWVyaWNMaXRlcmFsID0gXCJbMC05XStcIjtcclxuZXhwb3J0IHZhciBjb25mID0ge1xyXG4gICAgY29tbWVudHM6IHtcclxuICAgICAgICBsaW5lQ29tbWVudDogJy8vJyxcclxuICAgICAgICBibG9ja0NvbW1lbnQ6IFsnLyonLCAnKi8nXVxyXG4gICAgfSxcclxuICAgIGJyYWNrZXRzOiBbXHJcbiAgICAgICAgWyd7JywgJ30nXSxcclxuICAgICAgICBbJ1snLCAnXSddLFxyXG4gICAgICAgIFsnKCcsICcpJ11cclxuICAgIF0sXHJcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxyXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIicnJ1wiLCBjbG9zZTogXCInJydcIiB9XHJcbiAgICBdLFxyXG4gICAgYXV0b0Nsb3NpbmdQYWlyczogW1xyXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnWycsIGNsb3NlOiAnXScgfSxcclxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiwgbm90SW46IFsnc3RyaW5nJywgJ2NvbW1lbnQnXSB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInJydcIiwgY2xvc2U6IFwiJycnXCIsIG5vdEluOiBbJ3N0cmluZycsICdjb21tZW50J10gfVxyXG4gICAgXSxcclxuICAgIGF1dG9DbG9zZUJlZm9yZTogXCI6Liw9fV0pJyBcXG5cXHRcIixcclxuICAgIGluZGVudGF0aW9uUnVsZXM6IHtcclxuICAgICAgICBpbmNyZWFzZUluZGVudFBhdHRlcm46IG5ldyBSZWdFeHAoJ14oKD8hXFxcXC9cXFxcLykuKSooXFxcXHtbXn1cIlxcJ2BdKnxcXFxcKFteKVwiXFwnYF0qfFxcXFxbW15cXFxcXVwiXFwnYF0qKSQnKSxcclxuICAgICAgICBkZWNyZWFzZUluZGVudFBhdHRlcm46IG5ldyBSZWdFeHAoJ14oKD8hLio/XFxcXC9cXFxcKikuKlxcXFwqLyk/XFxcXHMqW1xcXFx9XFxcXF1dLiokJylcclxuICAgIH1cclxufTtcclxuZXhwb3J0IHZhciBsYW5ndWFnZSA9IHtcclxuICAgIGRlZmF1bHRUb2tlbjogJycsXHJcbiAgICB0b2tlblBvc3RmaXg6ICcuYmljZXAnLFxyXG4gICAgYnJhY2tldHM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JywgdG9rZW46ICdkZWxpbWl0ZXIuY3VybHknIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnWycsIGNsb3NlOiAnXScsIHRva2VuOiAnZGVsaW1pdGVyLnNxdWFyZScgfSxcclxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJywgdG9rZW46ICdkZWxpbWl0ZXIucGFyZW50aGVzaXMnIH1cclxuICAgIF0sXHJcbiAgICBzeW1ib2xzOiAvWz0+PCF+PzomfCtcXC0qL14lXSsvLFxyXG4gICAga2V5d29yZHM6IGtleXdvcmRzLFxyXG4gICAgbmFtZWRMaXRlcmFsczogbmFtZWRMaXRlcmFscyxcclxuICAgIGVzY2FwZXM6IFwiXFxcXFxcXFwodXtbMC05QS1GYS1mXSt9fG58cnx0fFxcXFxcXFxcfCd8XFxcXCR7KVwiLFxyXG4gICAgdG9rZW5pemVyOiB7XHJcbiAgICAgICAgcm9vdDogW3sgaW5jbHVkZTogJ0BleHByZXNzaW9uJyB9LCB7IGluY2x1ZGU6ICdAd2hpdGVzcGFjZScgfV0sXHJcbiAgICAgICAgc3RyaW5nVmVyYmF0aW06IFtcclxuICAgICAgICAgICAgeyByZWdleDogXCIofCd8JycpW14nXVwiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCInJydcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLnF1b3RlJywgbmV4dDogJ0Bwb3AnIH0gfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgc3RyaW5nTGl0ZXJhbDogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFwke1wiLCBhY3Rpb246IHsgdG9rZW46ICdkZWxpbWl0ZXIuYnJhY2tldCcsIG5leHQ6ICdAYnJhY2tldENvdW50aW5nJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiW15cXFxcXFxcXCckXStcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6ICdAZXNjYXBlcycsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZy5lc2NhcGUnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcXFxcXC5cIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLmVzY2FwZS5pbnZhbGlkJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJ1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcnLCBuZXh0OiAnQHBvcCcgfSB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBicmFja2V0Q291bnRpbmc6IFtcclxuICAgICAgICAgICAgeyByZWdleDogXCJ7XCIsIGFjdGlvbjogeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0JywgbmV4dDogJ0BicmFja2V0Q291bnRpbmcnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJ9XCIsIGFjdGlvbjogeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0JywgbmV4dDogJ0Bwb3AnIH0gfSxcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnZXhwcmVzc2lvbicgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgY29tbWVudDogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlteXFxcXCpdK1wiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXCpcXFxcL1wiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JywgbmV4dDogJ0Bwb3AnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJbXFxcXC8qXVwiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JyB9IH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHdoaXRlc3BhY2U6IFtcclxuICAgICAgICAgICAgeyByZWdleDogbm9uQ29tbWVudFdzIH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXC9cXFxcKlwiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JywgbmV4dDogJ0Bjb21tZW50JyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXC9cXFxcLy4qJFwiLCBhY3Rpb246IHsgdG9rZW46ICdjb21tZW50JyB9IH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIGV4cHJlc3Npb246IFtcclxuICAgICAgICAgICAgeyByZWdleDogXCInJydcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLnF1b3RlJywgbmV4dDogJ0BzdHJpbmdWZXJiYXRpbScgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIidcIiwgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLnF1b3RlJywgbmV4dDogJ0BzdHJpbmdMaXRlcmFsJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IG51bWVyaWNMaXRlcmFsLCBhY3Rpb246IHsgdG9rZW46ICdudW1iZXInIH0gfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVnZXg6IGlkZW50aWZpZXIsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGtleXdvcmRzJzogeyB0b2tlbjogJ2tleXdvcmQnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAbmFtZWRMaXRlcmFscyc6IHsgdG9rZW46ICdrZXl3b3JkJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiB7IHRva2VuOiAnaWRlbnRpZmllcicgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH1cclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9